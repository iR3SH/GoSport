// <auto-generated />
using System;
using GoSportData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GoSportData.Migrations
{
    [DbContext(typeof(GoDbContext))]
    partial class GoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("GoSportData.Classes.Genders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Homme"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Femme"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mixte"
                        });
                });

            modelBuilder.Entity("GoSportData.Classes.LoginTokens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Expirations")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("LoginTokens");
                });

            modelBuilder.Entity("GoSportData.Classes.Registrations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("UserId");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("GoSportData.Classes.Results", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Score")
                        .HasColumnType("longtext");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("UserId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("GoSportData.Classes.Sports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Sports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Boxe"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Judo"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Lutte"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Natation"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Triathlon"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Badminton"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Plongeon"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Tennis"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Tennis de Table"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Cyclisme"
                        });
                });

            modelBuilder.Entity("GoSportData.Classes.Tournaments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOver")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxUsers")
                        .HasColumnType("int");

                    b.Property<int?>("SportId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GenderId");

                    b.HasIndex("SportId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("GoSportData.Classes.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2020, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "julien.w68@hotmail.fr",
                            FirstName = "Julien",
                            LastName = "Wimmer",
                            Password = "$2a$11$lQeRsMj0fUuVKv9L/3zpmOY2uq8mzZF09rJOKjSpiGbGHXOEgWgwK"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(2020, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bot2@hotmail.fr",
                            FirstName = "Bot",
                            LastName = "2",
                            Password = "$2a$11$TA7L6/3tOdZ8kMud.LaB..ZFzMMR0JFodJhARfFwbaDD0lNw73mGW"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(2020, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bot3@hotmail.fr",
                            FirstName = "Bot",
                            LastName = "3",
                            Password = "$2a$11$NUAI.uLu7TcbV8u4n.RXDOPVFtUW.6m2rVsDddw/xMeO19x9zkbKm"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(2020, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bot4@hotmail.fr",
                            FirstName = "Bot",
                            LastName = "4",
                            Password = "$2a$11$3x5ZJmQ3XytPn3P5niQNjeovMEPHAAMkdWudKelVn0Vorp1aPcZ4G"
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(2020, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bot5@hotmail.fr",
                            FirstName = "Bot",
                            LastName = "5",
                            Password = "$2a$11$CyItoK8xixKUI0zv2ZeG6ueY0qkCsKWCsarN.LFGM3OlWtjli53pC"
                        },
                        new
                        {
                            Id = 6,
                            BirthDate = new DateTime(2020, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bot6@hotmail.fr",
                            FirstName = "Bot",
                            LastName = "6",
                            Password = "$2a$11$7nCvIMUq7zQiKjCNu5K/7efx99r2.XhLK7gP.1AsOvH2xpabvX3lG"
                        });
                });

            modelBuilder.Entity("GoSportData.Classes.LoginTokens", b =>
                {
                    b.HasOne("GoSportData.Classes.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GoSportData.Classes.Registrations", b =>
                {
                    b.HasOne("GoSportData.Classes.Tournaments", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId");

                    b.HasOne("GoSportData.Classes.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Tournament");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoSportData.Classes.Results", b =>
                {
                    b.HasOne("GoSportData.Classes.Tournaments", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId");

                    b.HasOne("GoSportData.Classes.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Tournament");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoSportData.Classes.Tournaments", b =>
                {
                    b.HasOne("GoSportData.Classes.Users", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GoSportData.Classes.Genders", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("GoSportData.Classes.Sports", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Gender");

                    b.Navigation("Sport");
                });
#pragma warning restore 612, 618
        }
    }
}
